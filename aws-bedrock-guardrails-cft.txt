AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Bedrock Guardrails Implementation - Comprehensive security controls for AWS Bedrock usage'

# =========================================================================
# PARAMETERS
# =========================================================================
# These parameters make the template configurable for different deployments
Parameters:
  # Administrative parameters
  AdminEmail:
    Type: String
    Description: Email address for notifications and alerts
    Default: admin@example.com
    ConstraintDescription: Must be a valid email address
  
  # Cost control parameters
  MonthlyBudgetAmount:
    Type: Number
    Description: Monthly budget limit for Bedrock in USD
    Default: 100
    MinValue: 1
    ConstraintDescription: Must be a positive number
    
  # Network parameters - References to existing infrastructure
  ExistingVpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the existing VPC to use for VPC endpoints
    
  ExistingSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the existing subnet to use for VPC endpoints
    
  # Environment configuration
  EnvironmentName:
    Type: String
    Description: Environment name (dev, test, prod, etc.)
    Default: dev
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: Environment name must contain only alphanumeric characters

# =========================================================================
# RESOURCES
# =========================================================================
Resources:
  # =========================================================================
  # IAM ROLES AND POLICIES
  # =========================================================================
  # These resources create IAM role and policy with least privilege access to AWS Bedrock
  # following security best practices by limiting access to only required models
  # and enforcing environment-based tagging
  
  BedrockAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'bedrock-access-role-${EnvironmentName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref BedrockRestrictedPolicy
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # Policy that restricts which Bedrock models can be accessed and enforces tagging
  BedrockRestrictedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'bedrock-restricted-policy-${EnvironmentName}'
      Description: Restricted policy for AWS Bedrock access with least privilege principles
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow invoking only specific Bedrock models
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource:
              # List of allowed foundation models - carefully curated for your use case
              - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
              - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-text-express-v1'
            Condition:
              # Enforce tagging to maintain environment separation
              StringEquals:
                'aws:RequestTag/Environment': !Ref EnvironmentName
          # Allow listing available models (read-only)
          - Effect: Allow
            Action:
              - bedrock:GetFoundationModel
            Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # =========================================================================
  # NETWORK CONTROLS
  # =========================================================================
  # These resources create private network access to Bedrock services
  # to prevent Bedrock traffic from traversing the public internet
  # and provide network-level isolation and protection
  
  # Security group that restricts network traffic to the Bedrock endpoint
  BedrockSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bedrock endpoint - restricts network traffic
      VpcId: !Ref ExistingVpcId
      SecurityGroupIngress:
        # Allow HTTPS (443) traffic only from within the VPC CIDR range
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16  # Consider parameterizing this value to match your VPC CIDR
      SecurityGroupEgress:
        # Allow all outbound traffic - modify as needed for stricter controls
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'bedrock-sg-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName

  # VPC Endpoint that enables private access to Bedrock services
  BedrockVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      # Connect to the Bedrock runtime service in the current region
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.bedrock-runtime'
      VpcEndpointType: Interface
      VpcId: !Ref ExistingVpcId
      SubnetIds:
        - !Ref ExistingSubnetId
      SecurityGroupIds:
        - !Ref BedrockSecurityGroup
      # Enable private DNS to make the endpoint accessible via the default AWS endpoint URL
      PrivateDnsEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # =========================================================================
  # MONITORING AND ALERTING
  # =========================================================================
  # These resources create comprehensive monitoring and alerting for Bedrock usage
  # to enable visibility into model usage patterns, costs, and potential issues

  # Centralized log group for Bedrock model invocations
  BedrockLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/bedrock/model-invocations-${EnvironmentName}'
      RetentionInDays: 30  # Retain logs for 30 days - adjust as needed for compliance
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # SNS topic for sending alerts and notifications about Bedrock usage
  BedrockAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'bedrock-alerts-${EnvironmentName}'
      Subscription:
        - Protocol: email
          Endpoint: !Ref AdminEmail
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # Alarm to detect unusually high Bedrock usage (proxy for costs)
  BedrockCostAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'bedrock-high-cost-alarm-${EnvironmentName}'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Invocations
      Namespace: AWS/Bedrock
      Period: 86400  # Daily - adjust to match your usage patterns
      Statistic: Sum
      Threshold: 1000  # Adjust based on your expected usage and cost threshold
      AlarmDescription: 'This alarm monitors for high Bedrock usage costs'
      Dimensions:
        - Name: ModelId
          Value: anthropic.claude-3-sonnet-20240229-v1:0  # Adjust for your most-used model
      AlarmActions:
        - !Ref BedrockAlertsTopic
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # =========================================================================
  # BEDROCK GUARDRAILS
  # =========================================================================
  # These resources implement content filtering and safety guardrails for Bedrock
  # to prevent generation of harmful content and protect sensitive information
  # Implemented as a custom resource since CloudFormation doesn't directly support Bedrock guardrails

  # IAM role for the Lambda function that creates Bedrock guardrails
  GuardrailsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockGuardrailsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:CreateGuardrail
                  - bedrock:UpdateGuardrail
                  - bedrock:DeleteGuardrail
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # Lambda function that creates and manages Bedrock guardrails
  GuardrailsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt GuardrailsLambdaRole.Arn
      Runtime: python3.9
      Timeout: 300
      Description: 'Lambda function to create and manage Bedrock guardrails'
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import json

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          bedrock = boto3.client('bedrock')

          def handler(event, context):
              """
              Custom resource handler to create, update, and delete Bedrock guardrails
              
              This handles the CloudFormation custom resource lifecycle events:
              - Create: Creates a new guardrail with safety filters
              - Update: Updates an existing guardrail with new configuration
              - Delete: Removes the guardrail
              """
              logger.info('Received event: %s', json.dumps(event))
              
              # Extract parameters
              props = event['ResourceProperties']
              guardrail_name = props.get('GuardrailName', 'content-safety-guardrail')
              env_name = props.get('EnvironmentName', 'dev')
              
              try:
                if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                  # Create guardrail configuration
                  response = bedrock.create_guardrail(
                    name=f"{guardrail_name}-{env_name}",
                    description="Guardrail to filter harmful content",
                    blockedInputMessaging={
                      'enabled': True,
                      'message': "Your input contains content that violates our usage policy."
                    },
                    blockedOutputsMessaging={
                      'enabled': True,
                      'message': "The model's response was blocked due to potentially harmful content."
                    },
                    contentPolicyConfig={
                      'filters': [
                        {
                          'type': 'HATE_SPEECH',
                          'threshold': 'MEDIUM'  # Options: LOW, MEDIUM, HIGH
                        },
                        {
                          'type': 'SEXUAL',
                          'threshold': 'MEDIUM'
                        },
                        {
                          'type': 'VIOLENCE',
                          'threshold': 'MEDIUM'
                        }
                      ]
                    },
                    sensitiveInformationPolicyConfig={
                      'piiEntities': [
                        {
                          'type': 'CREDIT_DEBIT_NUMBER',
                          'action': 'MASK'  # Options: MASK, BLOCK
                        },
                        {
                          'type': 'EMAIL',
                          'action': 'MASK'
                        },
                        {
                          'type': 'PHONE',
                          'action': 'MASK'
                        },
                        {
                          'type': 'SSN',
                          'action': 'BLOCK'  # Block SSNs completely
                        }
                      ]
                    },
                    wordPolicyConfig={
                      'managedWordLists': [
                        {
                          'type': 'PROFANITY',
                          'action': 'BLOCK'
                        }
                      ],
                      'customWordLists': [
                        {
                          'name': 'restricted-terms',
                          'description': 'Organization-specific terms to restrict',
                          'words': ['CONFIDENTIAL', 'SECRET', 'FOR_INTERNAL_USE_ONLY'],
                          'action': 'BLOCK'
                        }
                      ]
                    }
                  )
                  
                  guardrail_id = response['guardrailId']
                  logger.info(f"Created/Updated guardrail with ID: {guardrail_id}")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'GuardrailId': guardrail_id})
                
                elif event['RequestType'] == 'Delete':
                  # Get existing guardrail ID if available in physical resource ID
                  physical_id = event.get('PhysicalResourceId', '')
                  if physical_id.startswith('guardrail-'):
                    guardrail_id = physical_id
                    bedrock.delete_guardrail(guardrailId=guardrail_id)
                    logger.info(f"Deleted guardrail with ID: {guardrail_id}")
                    
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                
              except Exception as e:
                logger.error(f"Error: {str(e)}")
                cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # Custom resource that calls the Lambda function to create Bedrock guardrails
  BedrockGuardrails:
    Type: Custom::BedrockGuardrails
    Properties:
      ServiceToken: !GetAtt GuardrailsLambda.Arn
      GuardrailName: content-safety-guardrail
      EnvironmentName: !Ref EnvironmentName

  # =========================================================================
  # COST MANAGEMENT
  # =========================================================================
  # These resources implement budget controls to prevent unexpected Bedrock costs
  # and provide proactive cost management and alerts when approaching thresholds

  # Monthly budget for Bedrock usage with alerts
  BedrockBudget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: !Sub 'bedrock-monthly-budget-${EnvironmentName}'
        BudgetType: COST
        TimeUnit: MONTHLY
        BudgetLimit:
          Amount: !Ref MonthlyBudgetAmount
          Unit: USD
        CostFilters:
          # Filter to only track Bedrock service costs
          Service:
            - Amazon Bedrock
      NotificationsWithSubscribers:
        # Send notification when reaching 80% of the budget
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 80
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref AdminEmail

  # Note: No CloudTrail resources created as an existing CloudTrail is already in place
  # The existing CloudTrail should be configured to capture Bedrock API calls

  # =========================================================================
  # HUMAN OVERSIGHT
  # =========================================================================
  # These resources create mechanisms for human review of edge cases
  # to ensure that problematic model responses can be reviewed by humans

  # IAM role for the Lambda function that processes edge cases
  EdgeCaseReviewRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAndSnsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow publishing to SNS for human notification
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref BedrockAlertsTopic
              # Allow configuring Bedrock logging
              - Effect: Allow
                Action:
                  - bedrock:GetModelInvocationLoggingConfiguration
                  - bedrock:PutModelInvocationLoggingConfiguration
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # Lambda function that detects and routes edge cases for human review
  EdgeCaseReviewFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'bedrock-edge-case-review-${EnvironmentName}'
      Handler: index.handler
      Role: !GetAtt EdgeCaseReviewRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      Description: 'Function to detect and route edge cases for human review'
      Code:
        ZipFile: |
          /**
           * Edge Case Review Function for AWS Bedrock
           * 
           * This Lambda function processes Bedrock invocation logs to identify potential
           * edge cases that require human review, based on confidence scores or content markers.
           * 
           * It sends notifications to the configured SNS topic when an edge case is detected.
           */
          exports.handler = async (event) => {
            console.log('Received event:', JSON.stringify(event, null, 2));
            
            // This function would implement logic to:
            // 1. Process model invocation logs 
            // 2. Identify edge cases based on confidence scores or content markers
            // 3. Send notifications for human review when necessary
            
            // Example implementation
            const AWS = require('aws-sdk');
            const sns = new AWS.SNS();
            
            // This would be triggered by CloudWatch Events for Bedrock Invocations
            // Here you'd implement your edge case detection logic
            
            // For demo purposes, just send a notification when confidence is low
            if (event.detail && event.detail.confidenceScore < 0.6) {
              await sns.publish({
                TopicArn: process.env.SNS_TOPIC_ARN,
                Subject: 'Bedrock Edge Case Detected',
                Message: `Low confidence response detected. Request ID: ${event.detail.requestId}`
              }).promise();
            }
            
            return { statusCode: 200, body: 'Edge case processing complete' };
          };
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref BedrockAlertsTopic
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # =========================================================================
  # PROMPT MANAGEMENT INFRASTRUCTURE
  # =========================================================================
  # These resources create infrastructure for managing approved prompts and templates
  # to help standardize interactions with foundation models and enforce consistent usage patterns

  # DynamoDB table for storing vetted prompts that are known to be safe and effective
  ApprovedPromptsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'bedrock-approved-prompts-${EnvironmentName}'
      BillingMode: PAY_PER_REQUEST  # On-demand capacity for cost optimization
      AttributeDefinitions:
        - AttributeName: PromptId
          AttributeType: S
        - AttributeName: Category
          AttributeType: S
      KeySchema:
        - AttributeName: PromptId
          KeyType: HASH
      GlobalSecondaryIndexes:
        # Secondary index for querying prompts by category
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: Category
              KeyType: HASH
          Projection:
            ProjectionType: ALL  # Include all attributes in the index
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true  # Enable point-in-time recovery for data protection
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # SSM Parameter Store entry for secure template storage
  SafePromptTemplates:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/bedrock/prompt-templates/safe-${EnvironmentName}'
      Type: SecureString  # Encrypted storage for sensitive templates
      Description: 'Approved safe prompt templates for Bedrock foundation models'
      Value: !Sub |
        {
          "general_query": "Answer the following question factually and concisely: {{user_input}}",
          "content_generation": "Create content about {{topic}} that is appropriate for all audiences.",
          "data_analysis": "Analyze the following data and provide insights: {{data}}"
        }
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

# =========================================================================
# OUTPUTS
# =========================================================================
# These outputs export important resource identifiers for cross-stack references
Outputs:
  BedrockAccessRoleARN:
    Description: ARN of the Bedrock access role with least privilege permissions
    Value: !GetAtt BedrockAccessRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BedrockAccessRoleARN'

  BedrockVPCEndpointId:
    Description: ID of the Bedrock VPC endpoint for private network access
    Value: !Ref BedrockVPCEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-BedrockVPCEndpointId'

  BedrockAlertsTopicARN:
    Description: ARN of the Bedrock alerts SNS topic for monitoring notifications
    Value: !Ref BedrockAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-BedrockAlertsTopicARN'

  ApprovedPromptsTableName:
    Description: Name of the approved prompts DynamoDB table for prompt management
    Value: !Ref ApprovedPromptsTable
    Export:
      Name: !Sub '${AWS::StackName}-ApprovedPromptsTableName'
