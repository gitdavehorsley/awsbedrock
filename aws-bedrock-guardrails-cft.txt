AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Bedrock Guardrails Implementation'

Parameters:
  AdminEmail:
    Type: String
    Description: Email address for notifications
    Default: admin@example.com
  
  MonthlyBudgetAmount:
    Type: Number
    Description: Monthly budget limit for Bedrock in USD
    Default: 100
    
  ExistingVpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the existing VPC to use
    
  ExistingSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the existing subnet to use

Resources:
  # 1. IAM Roles and Policies
  BedrockAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'bedrock-access-role-SecurityToolsSandbox'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref BedrockRestrictedPolicy

  BedrockRestrictedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'bedrock-restricted-policy-SecurityToolsSandbox'
      Description: Restricted policy for AWS Bedrock access
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource:
              - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
              - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-text-express-v1'
            Condition:
              StringEquals:
                'aws:RequestTag/Environment': 'SecurityToolsSandbox'
          - Effect: Allow
            Action:
              - bedrock:GetFoundationModel
            Resource: '*'

  # 2. Use Existing VPC Resources

  BedrockSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bedrock endpoint
      VpcId: !Ref ExistingVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: 'bedrock-sg-SecurityToolsSandbox'

  BedrockVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.bedrock-runtime'
      VpcEndpointType: Interface
      VpcId: !Ref ExistingVpcId
      SubnetIds:
        - !Ref ExistingSubnetId
      SecurityGroupIds:
        - !Ref BedrockSecurityGroup
      PrivateDnsEnabled: true

  # 3. CloudWatch Monitoring and Alarms
  BedrockLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/bedrock/model-invocations-SecurityToolsSandbox'
      RetentionInDays: 30

  BedrockAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: 'bedrock-alerts-SecurityToolsSandbox'
      Subscription:
        - Protocol: email
          Endpoint: !Ref AdminEmail

  BedrockCostAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: 'bedrock-high-cost-alarm-SecurityToolsSandbox'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Invocations
      Namespace: AWS/Bedrock
      Period: 86400  # Daily
      Statistic: Sum
      Threshold: 1000  # Adjust based on cost threshold
      AlarmDescription: 'This alarm monitors for high Bedrock usage costs'
      Dimensions:
        - Name: ModelId
          Value: anthropic.claude-3-sonnet-20240229-v1:0
      AlarmActions:
        - !Ref BedrockAlertsTopic

  # 4. Custom Resource for AWS Bedrock Guardrails (since CloudFormation doesn't directly support Bedrock guardrails)
  GuardrailsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockGuardrailsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:CreateGuardrail
                  - bedrock:UpdateGuardrail
                  - bedrock:DeleteGuardrail
                Resource: '*'

  GuardrailsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt GuardrailsLambdaRole.Arn
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import json

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          bedrock = boto3.client('bedrock')

          def handler(event, context):
            logger.info('Received event: %s', json.dumps(event))
            
            # Extract parameters
            props = event['ResourceProperties']
            guardrail_name = props.get('GuardrailName', 'content-safety-guardrail')
            env_name = props.get('EnvironmentName', 'prod')
            
            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                # Create guardrail configuration
                response = bedrock.create_guardrail(
                  name=f"{guardrail_name}-{env_name}",
                  description="Guardrail to filter harmful content",
                  blockedInputMessaging={
                    'enabled': True,
                    'message': "Your input contains content that violates our usage policy."
                  },
                  blockedOutputsMessaging={
                    'enabled': True,
                    'message': "The model's response was blocked due to potentially harmful content."
                  },
                  contentPolicyConfig={
                    'filters': [
                      {
                        'type': 'HATE_SPEECH',
                        'threshold': 'MEDIUM'
                      },
                      {
                        'type': 'SEXUAL',
                        'threshold': 'MEDIUM'
                      },
                      {
                        'type': 'VIOLENCE',
                        'threshold': 'MEDIUM'
                      }
                    ]
                  },
                  sensitiveInformationPolicyConfig={
                    'piiEntities': [
                      {
                        'type': 'CREDIT_DEBIT_NUMBER',
                        'action': 'MASK'
                      },
                      {
                        'type': 'EMAIL',
                        'action': 'MASK'
                      },
                      {
                        'type': 'PHONE',
                        'action': 'MASK'
                      },
                      {
                        'type': 'SSN',
                        'action': 'BLOCK'
                      }
                    ]
                  },
                  wordPolicyConfig={
                    'managedWordLists': [
                      {
                        'type': 'PROFANITY',
                        'action': 'BLOCK'
                      }
                    ],
                    'customWordLists': [
                      {
                        'name': 'restricted-terms',
                        'description': 'Organization-specific terms to restrict',
                        'words': ['CONFIDENTIAL', 'SECRET', 'FOR_INTERNAL_USE_ONLY'],
                        'action': 'BLOCK'
                      }
                    ]
                  }
                )
                
                guardrail_id = response['guardrailId']
                logger.info(f"Created/Updated guardrail with ID: {guardrail_id}")
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {'GuardrailId': guardrail_id})
              
              elif event['RequestType'] == 'Delete':
                # Get existing guardrail ID if available in physical resource ID
                physical_id = event.get('PhysicalResourceId', '')
                if physical_id.startswith('guardrail-'):
                  guardrail_id = physical_id
                  bedrock.delete_guardrail(guardrailId=guardrail_id)
                  logger.info(f"Deleted guardrail with ID: {guardrail_id}")
                  
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              
            except Exception as e:
              logger.error(f"Error: {str(e)}")
              cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  BedrockGuardrails:
    Type: Custom::BedrockGuardrails
    Properties:
      ServiceToken: !GetAtt GuardrailsLambda.Arn
      GuardrailName: content-safety-guardrail
      EnvironmentName: 'SecurityToolsSandbox'

  # 5. AWS Budget for Cost Management
  BedrockBudget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: 'bedrock-monthly-budget-SecurityToolsSandbox'
        BudgetType: COST
        TimeUnit: MONTHLY
        BudgetLimit:
          Amount: !Ref MonthlyBudgetAmount
          Unit: USD
        CostFilters:
          Service:
            - Amazon Bedrock
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 80
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref AdminEmail

  # 6. AWS CloudTrail for API Logging
  BedrockLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'bedrock-cloudtrail-logs-${AWS::AccountId}-SecurityToolsSandbox'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BedrockLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BedrockLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${BedrockLogsBucket.Arn}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  BedrockTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: BedrockLogsBucketPolicy
    Properties:
      TrailName: 'bedrock-api-trail-SecurityToolsSandbox'
      S3BucketName: !Ref BedrockLogsBucket
      IsLogging: true
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: false
      EnableLogFileValidation: true
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true

  # 7. Lambda for Human Oversight/Review of Edge Cases
  EdgeCaseReviewRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAndSnsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref BedrockAlertsTopic
              - Effect: Allow
                Action:
                  - bedrock:GetModelInvocationLoggingConfiguration
                  - bedrock:PutModelInvocationLoggingConfiguration
                Resource: '*'

  EdgeCaseReviewFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'bedrock-edge-case-review-SecurityToolsSandbox'
      Handler: index.handler
      Role: !GetAtt EdgeCaseReviewRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Received event:', JSON.stringify(event, null, 2));
            
            // This function would implement logic to:
            // 1. Process model invocation logs 
            // 2. Identify edge cases based on confidence scores or content markers
            // 3. Send notifications for human review when necessary
            
            // Example implementation
            const AWS = require('aws-sdk');
            const sns = new AWS.SNS();
            
            // This would be triggered by CloudWatch Events for Bedrock Invocations
            // Here you'd implement your edge case detection logic
            
            // For demo purposes, just send a notification
            if (event.detail && event.detail.confidenceScore < 0.6) {
              await sns.publish({
                TopicArn: process.env.SNS_TOPIC_ARN,
                Subject: 'Bedrock Edge Case Detected',
                Message: `Low confidence response detected. Request ID: ${event.detail.requestId}`
              }).promise();
            }
            
            return { statusCode: 200, body: 'Edge case processing complete' };
          };
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref BedrockAlertsTopic

  # 8. DynamoDB for Storing Approved Prompts
  ApprovedPromptsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'bedrock-approved-prompts-SecurityToolsSandbox'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PromptId
          AttributeType: S
        - AttributeName: Category
          AttributeType: S
      KeySchema:
        - AttributeName: PromptId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: Category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # 9. SSM Parameters for Prompt Templates
  SafePromptTemplates:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/bedrock/prompt-templates/safe-SecurityToolsSandbox'
      Type: SecureString
      Value: !Sub |
        {
          "general_query": "Answer the following question factually and concisely: {{user_input}}",
          "content_generation": "Create content about {{topic}} that is appropriate for all audiences.",
          "data_analysis": "Analyze the following data and provide insights: {{data}}"
        }

Outputs:
  BedrockAccessRoleARN:
    Description: ARN of the Bedrock access role
    Value: !GetAtt BedrockAccessRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BedrockAccessRoleARN'

  BedrockVPCEndpointId:
    Description: ID of the Bedrock VPC endpoint
    Value: !Ref BedrockVPCEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-BedrockVPCEndpointId'

  BedrockAlertsTopicARN:
    Description: ARN of the Bedrock alerts SNS topic
    Value: !Ref BedrockAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-BedrockAlertsTopicARN'

  ApprovedPromptsTableName:
    Description: Name of the approved prompts DynamoDB table
    Value: !Ref ApprovedPromptsTable
    Export:
      Name: !Sub '${AWS::StackName}-ApprovedPromptsTableName'
